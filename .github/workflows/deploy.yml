name: CoserEden Production Deployment

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  NODE_VERSION: '18.x'
  SERVER_HOST: '185.170.198.240'
  SERVER_USER: 'root'
  DEPLOY_PATH: '/var/www/cosereeden'

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test & Quality Check

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 ESLint check
      run: npm run lint:check

    - name: 🏗️ TypeScript check
      run: npm run type-check

    - name: 🧪 Run tests
      run: npm run test
      env:
        NODE_ENV: test

  build:
    runs-on: ubuntu-latest
    needs: test
    name: 🏗️ Build Application

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build Next.js application
      run: npm run build
      env:
        NODE_ENV: production
        NEXTAUTH_URL: https://tutu365.cc
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        CLOUDFLARE_R2_ENDPOINT: https://e0a67a18c91c9a92d9ff633f911a6ca1.r2.cloudflarestorage.com
        CLOUDFLARE_R2_BUCKET_NAME: tut
        CLOUDFLARE_R2_CDN_DOMAIN: https://cc.tutu365.cc

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
          package.json
          package-lock.json
          prisma/
        retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: 🚀 Deploy to Production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://tutu365.cc

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files

    - name: 🔐 Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 📋 Create production environment file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        NEXTAUTH_URL=https://tutu365.cc
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        DATABASE_URL=${{ secrets.DATABASE_URL }}

        # Cloudflare R2 Storage
        CLOUDFLARE_R2_ACCOUNT_ID=e0a67a18c91c9a92d9ff633f911a6ca1
        CLOUDFLARE_R2_ACCESS_KEY_ID=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
        CLOUDFLARE_R2_SECRET_ACCESS_KEY=${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        CLOUDFLARE_R2_BUCKET_NAME=tut
        CLOUDFLARE_R2_ENDPOINT=https://e0a67a18c91c9a92d9ff633f911a6ca1.r2.cloudflarestorage.com
        CLOUDFLARE_R2_CDN_DOMAIN=https://cc.tutu365.cc
        CLOUDFLARE_R2_PUBLIC_URL=https://cc.tutu365.cc

        # Telegram Bot
        TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_BOT_USERNAME=TuTu365bot

        # 邮件配置 (Hostinger)
        SMTP_HOST=smtp.hostinger.com
        SMTP_PORT=465
        SMTP_SECURE=true
        SMTP_USER=tu@tutu365.cc
        SMTP_PASS=${{ secrets.SMTP_PASS }}
        SMTP_FROM="CoserEden <tu@tutu365.cc>"

        # CDN Configuration
        CDN_ENVIRONMENT=production
        CDN_PRODUCTION_PRIMARY=https://cc.tutu365.cc
        CDN_PRODUCTION_BACKUP=https://cc.tutu365.com

        # Storage Configuration
        USE_NEW_STORAGE_SYSTEM=true
        STORAGE_PROVIDER=cloudflare-r2
        EOF

    - name: 📦 Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          .next/ \
          public/ \
          package.json \
          package-lock.json \
          prisma/ \
          .env.production

    - name: 🚀 Deploy to server
      run: |
        # 上传部署包到服务器
        scp -o StrictHostKeyChecking=no deployment.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/tmp/

        # 执行部署脚本
        ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          set -e

          echo "🚀 开始部署CoserEden到生产环境..."

          # 创建部署目录
          mkdir -p ${{ env.DEPLOY_PATH }}
          cd ${{ env.DEPLOY_PATH }}

          # 备份当前版本
          if [ -d ".next" ]; then
            echo "📦 备份当前版本..."
            sudo mv .next .next.backup.$(date +%Y%m%d_%H%M%S) || true
            sudo mv public public.backup.$(date +%Y%m%d_%H%M%S) || true
          fi

          # 解压新版本
          echo "📤 解压新版本..."
          tar -xzf /tmp/deployment.tar.gz

          # 安装Node.js (如果未安装)
          if ! command -v node &> /dev/null; then
            echo "📦 安装Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi

          # 安装PM2 (如果未安装)
          if ! command -v pm2 &> /dev/null; then
            echo "📦 安装PM2..."
            sudo npm install -g pm2
          fi

          # 安装生产依赖
          echo "📦 安装生产依赖..."
          npm ci --production --silent

          # 运行数据库迁移
          echo "🗄️ 运行数据库迁移..."
          npx prisma generate
          npx prisma db push

          # 创建PM2配置文件
          cat > ecosystem.config.js << 'EOFPM2'
          module.exports = {
            apps: [{
              name: 'cosereeden',
              script: 'npm',
              args: 'start',
              cwd: '${{ env.DEPLOY_PATH }}',
              instances: 'max',
              exec_mode: 'cluster',
              env: {
                NODE_ENV: 'production',
                PORT: 3000
              },
              error_file: '/var/log/cosereeden/error.log',
              out_file: '/var/log/cosereeden/out.log',
              log_file: '/var/log/cosereeden/combined.log',
              time: true,
              max_memory_restart: '1G',
              node_args: '--max-old-space-size=1024'
            }]
          };
          EOFPM2

          # 创建日志目录
          sudo mkdir -p /var/log/cosereeden
          sudo chown -R $USER:$USER /var/log/cosereeden

          # 启动或重启应用
          echo "🔄 启动应用..."
          pm2 reload ecosystem.config.js --env production || pm2 start ecosystem.config.js --env production

          # 保存PM2配置
          pm2 save
          pm2 startup

          # 清理临时文件
          rm -f /tmp/deployment.tar.gz

          echo "✅ 部署完成！"
        EOF

    - name: 🔍 Health check
      run: |
        echo "🔍 执行健康检查..."
        sleep 15

        # 检查应用是否启动
        ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          # 检查PM2进程状态
          pm2 status cosereeden

          # 检查端口是否监听
          if netstat -tuln | grep -q ":3000 "; then
            echo "✅ 应用端口3000正在监听"
          else
            echo "❌ 应用端口3000未监听"
            exit 1
          fi

          # 检查应用响应
          if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "✅ 应用健康检查通过"
          else
            echo "❌ 应用健康检查失败"
            exit 1
          fi
        EOF

    - name: 🔔 Notify deployment result
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="✅ 部署成功"
          MESSAGE="🎉 CoserEden生产环境部署成功！

        🌐 主域名: https://tutu365.cc
        🌐 备用域名: https://tutu365.com
        📦 版本: ${{ github.sha }}
        🕐 部署时间: $(date '+%Y-%m-%d %H:%M:%S')

        🚀 新功能已上线，4600+专业cosplay创作者可以享受更好的服务！"
        else
          STATUS="❌ 部署失败"
          MESSAGE="⚠️ CoserEden生产环境部署失败！

        📦 版本: ${{ github.sha }}
        🕐 失败时间: $(date '+%Y-%m-%d %H:%M:%S')
        📋 查看日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

        请立即检查并修复问题！"
        fi

        # 发送Telegram通知
        curl -X POST "https://api.telegram.org/bot8176653187:AAE4_lLOwAl9h0i1bNlLDh4GCiGKaOtYgeo/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{
            \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
            \"text\": \"$MESSAGE\",
            \"parse_mode\": \"HTML\"
          }" || echo "Telegram通知发送失败"

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    name: 🧹 Cleanup
    if: always()

    steps:
    - name: 🗑️ Clean up artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          for (const artifact of artifacts.data.artifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }

          console.log('✅ 构建产物清理完成');
