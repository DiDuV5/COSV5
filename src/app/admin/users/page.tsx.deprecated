/**
 * @fileoverview 管理后台用户管理页面
 * @description 用户列表、搜索、筛选、编辑、删除等功能
 * @author Augment AI
 * @date 2024-01-XX
 * @version 1.0.0
 * @since 1.0.0
 *
 * @dependencies
 * - @trpc/react-query: ^10.45.0
 * - react-hook-form: ^7.0.0
 * - @hookform/resolvers: ^3.0.0
 * - zod: ^3.22.0
 *
 * @changelog
 * - 2024-01-XX: 初始版本创建
 */

"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { api } from "@/trpc/react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { UnifiedAvatar } from "@/components/ui/unified-avatar";
import {
  Users,
  Search,
  Filter,
  Plus,
  MoreHorizontal,
  Edit,
  Trash2,
  Key,
  UserCheck,
  UserX,
  Download,
  Upload,
} from "lucide-react";
import { CreateUserDialog } from "@/components/admin/CreateUserDialog";
import { EditUserDialog } from "@/components/admin/EditUserDialog";
import { BatchCreateUsersDialog } from "@/components/admin/BatchCreateUsersDialog";
import { DeleteUserDialog } from "@/components/admin/DeleteUserDialog";
import { ResetPasswordDialog } from "@/components/admin/ResetPasswordDialog";

import { USER_LEVEL_OPTIONS } from "@/lib/constants/user-levels";

// 搜索表单验证
const searchSchema = z.object({
  search: z.string().optional(),
  userLevel: z.string().optional(),
  isActive: z.string().optional(),
  isVerified: z.string().optional(),
  sortBy: z.enum(['createdAt', 'lastLoginAt', 'username', 'postsCount']).default('createdAt'),
  sortOrder: z.enum(['asc', 'desc']).default('desc'),
});

type SearchFormData = z.infer<typeof searchSchema>;

export default function AdminUsersPage() {
  const [selectedUser, setSelectedUser] = useState<string | null>(null);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showPasswordDialog, setShowPasswordDialog] = useState(false);
  const [showBatchDialog, setShowBatchDialog] = useState(false);

  // 搜索表单
  const searchForm = useForm<SearchFormData>({
    resolver: zodResolver(searchSchema),
    defaultValues: {
      search: "",
      userLevel: "",
      isActive: "",
      isVerified: "",
      sortBy: "createdAt",
      sortOrder: "desc",
    },
  });

  const searchValues = searchForm.watch();

  // 获取用户列表
  const {
    data: usersData,
    isPending,
    refetch,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
  } = api.admin.getUsers.useInfiniteQuery(
    {
      limit: 20,
      search: searchValues.search || undefined,
      userLevel: searchValues.userLevel || undefined,
      isActive: searchValues.isActive ? searchValues.isActive === "true" : undefined,
      isVerified: searchValues.isVerified ? searchValues.isVerified === "true" : undefined,
      sortBy: searchValues.sortBy,
      sortOrder: searchValues.sortOrder,
    },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    }
  );

  const users = usersData?.pages.flatMap((page) => page.users) ?? [];

  // 获取用户统计
  const { data: stats } = api.admin.getStats.useQuery();

  const handleSearch = (data: SearchFormData) => {
    refetch();
  };

  const handleEditUser = (userId: string) => {
    setSelectedUser(userId);
    setShowEditDialog(true);
  };

  const handleDeleteUser = (userId: string) => {
    setSelectedUser(userId);
    setShowDeleteDialog(true);
  };

  const handleResetPassword = (userId: string) => {
    setSelectedUser(userId);
    setShowPasswordDialog(true);
  };

  const handleSuccess = () => {
    refetch();
  };

  const handleExportUsers = async () => {
    try {
      // 获取所有用户数据
      const allUsers = [];
      let cursor: string | undefined = undefined;

      // 分批获取所有用户数据
      do {
        // 使用 fetch 直接调用 tRPC API
        const params: URLSearchParams = new URLSearchParams({
          input: JSON.stringify({
            limit: 100,
            cursor,
            search: searchValues.search || undefined,
            userLevel: searchValues.userLevel || undefined,
            isActive: searchValues.isActive ? searchValues.isActive === "true" : undefined,
            isVerified: searchValues.isVerified ? searchValues.isVerified === "true" : undefined,
            sortBy: searchValues.sortBy,
            sortOrder: searchValues.sortOrder,
          })
        });

        const response = await fetch(`/api/trpc/admin.getUsers?${params}`);
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error?.message || '获取用户数据失败');
        }

        allUsers.push(...data.result.data.users);
        cursor = data.result.data.nextCursor;
      } while (cursor);

      // 生成CSV内容
      const csvHeaders = [
        'ID',
        '用户名',
        '邮箱',
        '显示名称',
        '用户等级',
        '验证状态',
        '账户状态',
        '发布权限',
        'Telegram ID',
        'Telegram用户名',
        '发布数量',
        '粉丝数量',
        '关注数量',
        '最后登录',
        '注册时间'
      ];

      const csvRows = allUsers.map(user => [
        user.id,
        user.username,
        user.email || '',
        user.displayName || '',
        getUserLevelInfo(user.userLevel).label,
        user.isVerified ? '已验证' : '未验证',
        user.isActive ? '已启用' : '已禁用',
        user.canPublish ? '可发布' : '不可发布',
        user.telegramId || '',
        user.telegramUsername || '',
        user.postsCount,
        user.followersCount,
        user.followingCount,
        user.lastLoginAt ? formatDate(user.lastLoginAt) : '从未',
        formatDate(user.createdAt)
      ]);

      // 创建CSV内容
      const csvContent = [
        csvHeaders.join(','),
        ...csvRows.map(row => row.map(cell => `"${cell}"`).join(','))
      ].join('\n');

      // 下载文件
      const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `用户数据_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('导出失败:', error);
      alert('导出失败，请重试');
    }
  };

  const getUserLevelInfo = (level: string) => {
    return USER_LEVEL_OPTIONS.find(l => l.value === level) || USER_LEVEL_OPTIONS[1];
  };

  const formatDate = (date: Date | null) => {
    if (!date) return "从未";
    return new Intl.DateTimeFormat("zh-CN", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    }).format(new Date(date));
  };

  return (
    <div className="space-y-6">
      {/* 页面标题 */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">用户管理</h1>
          <p className="text-gray-600 mt-1">
            管理平台用户，包括创建、编辑、删除和权限设置
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm" onClick={handleExportUsers}>
            <Download className="w-4 h-4 mr-2" />
            导出
          </Button>
          <Button variant="outline" size="sm" onClick={() => setShowBatchDialog(true)}>
            <Upload className="w-4 h-4 mr-2" />
            批量导入
          </Button>
          <Button onClick={() => setShowCreateDialog(true)}>
            <Plus className="w-4 h-4 mr-2" />
            创建用户
          </Button>
        </div>
      </div>

      {/* 统计卡片 */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">总用户数</p>
                <p className="text-2xl font-bold">{stats?.totalUsers || 0}</p>
              </div>
              <Users className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">活跃用户</p>
                <p className="text-2xl font-bold">{stats?.activeUsers || 0}</p>
              </div>
              <UserCheck className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">已验证用户</p>
                <p className="text-2xl font-bold">
                  {users.filter(u => u.isVerified).length}
                </p>
              </div>
              <UserCheck className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">管理员</p>
                <p className="text-2xl font-bold">
                  {users.filter(u => u.userLevel === "ADMIN").length}
                </p>
              </div>
              <UserX className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* 搜索和筛选 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="w-5 h-5" />
            搜索和筛选
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={searchForm.handleSubmit(handleSearch)} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
              <div className="md:col-span-2">
                <Input
                  placeholder="搜索用户名、邮箱、显示名..."
                  {...searchForm.register("search")}
                />
              </div>
              <Select
                value={searchValues.userLevel}
                onValueChange={(value) => searchForm.setValue("userLevel", value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="用户等级" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">全部等级</SelectItem>
                  {USER_LEVEL_OPTIONS.map((level) => (
                    <SelectItem key={level.value} value={level.value}>
                      {level.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Select
                value={searchValues.isActive}
                onValueChange={(value) => searchForm.setValue("isActive", value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="账户状态" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">全部状态</SelectItem>
                  <SelectItem value="true">已启用</SelectItem>
                  <SelectItem value="false">已禁用</SelectItem>
                </SelectContent>
              </Select>
              <Select
                value={searchValues.isVerified}
                onValueChange={(value) => searchForm.setValue("isVerified", value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="验证状态" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">全部验证</SelectItem>
                  <SelectItem value="true">已验证</SelectItem>
                  <SelectItem value="false">未验证</SelectItem>
                </SelectContent>
              </Select>
              <Button type="submit" className="w-full">
                <Filter className="w-4 h-4 mr-2" />
                筛选
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>

      {/* 用户列表 */}
      <Card>
        <CardHeader>
          <CardTitle>用户列表</CardTitle>
          <CardDescription>
            共 {users.length} 个用户
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isPending ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          ) : (
            <div className="space-y-4">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>用户</TableHead>
                    <TableHead>等级</TableHead>
                    <TableHead>状态</TableHead>
                    <TableHead>统计</TableHead>
                    <TableHead>最后登录</TableHead>
                    <TableHead>注册时间</TableHead>
                    <TableHead>操作</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {users.map((user) => {
                    const levelInfo = getUserLevelInfo(user.userLevel);
                    return (
                      <TableRow key={user.id}>
                        <TableCell>
                          <div className="flex items-center space-x-3">
                            <UnifiedAvatar
                              user={{
                                username: user.username,
                                displayName: user.displayName,
                                avatarUrl: user.avatarUrl,
                                isVerified: user.isVerified,
                                userLevel: user.userLevel,
                              }}
                              size="sm"
                              showVerifiedBadge={false}
                              fallbackType="gradient"
                            />
                            <div>
                              <div className="font-medium">{user.displayName || user.username}</div>
                              <div className="text-sm text-gray-500">@{user.username}</div>
                              {user.email && (
                                <div className="text-xs text-gray-400">{user.email}</div>
                              )}
                            </div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Badge className={levelInfo.color}>
                            {levelInfo.label}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-1">
                            <Badge variant={user.isActive ? "default" : "secondary"}>
                              {user.isActive ? "已启用" : "已禁用"}
                            </Badge>
                            {user.isVerified && (
                              <Badge variant="outline" className="text-green-600">
                                已验证
                              </Badge>
                            )}
                            {(user as any)?.canPublish && (
                              <Badge variant="outline" className="text-blue-600">
                                可发布
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm space-y-1">
                            <div>内容: {user.postsCount}</div>
                            <div>关注: {user.followingCount}</div>
                            <div>粉丝: {user.followersCount}</div>
                          </div>
                        </TableCell>
                        <TableCell className="text-sm">
                          {formatDate(user.lastLoginAt)}
                        </TableCell>
                        <TableCell className="text-sm">
                          {formatDate(user.createdAt)}
                        </TableCell>
                        <TableCell>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm">
                                <MoreHorizontal className="w-4 h-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>操作</DropdownMenuLabel>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem onClick={() => handleEditUser(user.id)}>
                                <Edit className="w-4 h-4 mr-2" />
                                编辑
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleResetPassword(user.id)}>
                                <Key className="w-4 h-4 mr-2" />
                                重置密码
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem
                                className="text-red-600"
                                onClick={() => handleDeleteUser(user.id)}
                              >
                                <Trash2 className="w-4 h-4 mr-2" />
                                删除
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>

              {/* 加载更多 */}
              {hasNextPage && (
                <div className="flex justify-center pt-4">
                  <Button
                    variant="outline"
                    onClick={() => fetchNextPage()}
                    disabled={isFetchingNextPage}
                  >
                    {isFetchingNextPage ? "加载中..." : "加载更多"}
                  </Button>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      {/* 对话框 */}
      <CreateUserDialog
        open={showCreateDialog}
        onOpenChange={setShowCreateDialog}
        onSuccess={handleSuccess}
      />

      <EditUserDialog
        userId={selectedUser}
        open={showEditDialog}
        onOpenChange={(open) => {
          setShowEditDialog(open);
          if (!open) setSelectedUser(null);
        }}
        onSuccess={handleSuccess}
      />

      <BatchCreateUsersDialog
        open={showBatchDialog}
        onOpenChange={setShowBatchDialog}
        onSuccess={handleSuccess}
      />

      <DeleteUserDialog
        userId={selectedUser}
        open={showDeleteDialog}
        onOpenChange={(open) => {
          setShowDeleteDialog(open);
          if (!open) setSelectedUser(null);
        }}
        onSuccess={handleSuccess}
      />

      <ResetPasswordDialog
        userId={selectedUser}
        open={showPasswordDialog}
        onOpenChange={(open) => {
          setShowPasswordDialog(open);
          if (!open) setSelectedUser(null);
        }}
        onSuccess={handleSuccess}
      />
    </div>
  );
}
