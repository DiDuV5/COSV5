/**
 * @fileoverview ÈÇÆÁÆ±ÈÖçÁΩÆÈ™åËØÅÁÆ°ÁêÜË∑ØÁî±
 * @description Êèê‰æõÈÇÆÁÆ±ÈÖçÁΩÆÈ™åËØÅÂíåÁÆ°ÁêÜÂäüËÉΩÁöÑtRPCË∑ØÁî±
 * @author Augment AI
 * @date 2025-07-03
 * @version 1.0.0
 */

import { z } from "zod";
import { createTRPCRouter, adminProcedure } from "@/server/api/trpc";
import { TRPCErrorHandler } from "@/lib/errors/trpc-error-handler";
import { EmailConfigValidator } from "@/lib/middleware/email-config-validator";
import { emailVerificationConfig } from "@/lib/config/email-verification-config";

/**
 * ÈÇÆÁÆ±ÈÖçÁΩÆÈ™åËØÅË∑ØÁî±
 */
export const emailConfigValidationRouter = createTRPCRouter({
  /**
   * È™åËØÅÊâÄÊúâÈÇÆÁÆ±ÈÖçÁΩÆ
   */
  validateAllConfigs: adminProcedure
    .query(async () => {
      try {
        const result = await EmailConfigValidator.validateAllConfigs();

        console.log('üìß ÈÇÆÁÆ±ÈÖçÁΩÆÈ™åËØÅÂÆåÊàê:', {
          isValid: result.isValid,
          errorCount: result.errors.length,
          warningCount: result.warnings.length,
        });

        return result;
      } catch (error) {
        console.error('‚ùå ÈÇÆÁÆ±ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('ÈÇÆÁÆ±ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•');
      }
    }),

  /**
   * Âø´ÈÄüÈ™åËØÅÂÖ≥ÈîÆÈÖçÁΩÆ
   */
  quickValidate: adminProcedure
    .query(async () => {
      try {
        const isValid = await EmailConfigValidator.quickValidate();

        return {
          isValid,
          message: isValid ? 'ÂÖ≥ÈîÆÈÖçÁΩÆÈ™åËØÅÈÄöËøá' : 'ÂÖ≥ÈîÆÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•',
          timestamp: new Date().toISOString(),
        };
      } catch (error) {
        console.error('‚ùå Âø´ÈÄüÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('Âø´ÈÄüÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•');
      }
    }),

  /**
   * ÁîüÊàêÈÖçÁΩÆÊä•Âëä
   */
  generateConfigReport: adminProcedure
    .query(async () => {
      try {
        const report = await EmailConfigValidator.generateConfigReport();

        return {
          report,
          generatedAt: new Date().toISOString(),
          format: 'markdown',
        };
      } catch (error) {
        console.error('‚ùå ÁîüÊàêÈÖçÁΩÆÊä•ÂëäÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('ÁîüÊàêÈÖçÁΩÆÊä•ÂëäÂ§±Ë¥•');
      }
    }),

  /**
   * Ëé∑ÂèñÂΩìÂâçÈÖçÁΩÆÊëòË¶Å
   */
  getConfigSummary: adminProcedure
    .query(async () => {
      try {
        await emailVerificationConfig.initialize();
        const summary = emailVerificationConfig.getConfigSummary();

        return {
          ...summary,
          retrievedAt: new Date().toISOString(),
        };
      } catch (error) {
        console.error('‚ùå Ëé∑ÂèñÈÖçÁΩÆÊëòË¶ÅÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('Ëé∑ÂèñÈÖçÁΩÆÊëòË¶ÅÂ§±Ë¥•');
      }
    }),

  /**
   * ÊµãËØïÈÇÆÁÆ±È™åËØÅURLÁîüÊàê
   */
  testUrlGeneration: adminProcedure
    .input(z.object({
      testToken: z.string().optional().default('test-token-123'),
    }))
    .query(async ({ input }) => {
      try {
        // ‰ΩøÁî®Áªü‰∏ÄÁöÑURLÁîüÊàêÂô®ËøõË°åÊµãËØï
        const { generateVerificationUrl, generatePasswordResetUrl } = await import('@/lib/config/url-config');

        const verificationUrl = generateVerificationUrl(input.testToken);
        const passwordResetUrl = generatePasswordResetUrl(input.testToken);

        return {
          verificationUrl,
          passwordResetUrl,
          testToken: input.testToken,
          generatedAt: new Date().toISOString(),
          urlGenerator: 'url-config.ts', // Ê†áËØÜ‰ΩøÁî®ÁöÑURLÁîüÊàêÂô®
        };
      } catch (error) {
        console.error('‚ùå URLÁîüÊàêÊµãËØïÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('URLÁîüÊàêÊµãËØïÂ§±Ë¥•');
      }
    }),

  /**
   * È™åËØÅÈÇÆÁÆ±ÂüüÂêçÁôΩÂêçÂçï
   */
  validateEmailDomain: adminProcedure
    .input(z.object({
      email: z.string().email('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ'),
    }))
    .query(async ({ input }) => {
      try {
        await emailVerificationConfig.initialize();

        const isAllowed = emailVerificationConfig.isEmailDomainAllowed(input.email);
        const config = emailVerificationConfig.getConfig();

        return {
          email: input.email,
          isAllowed,
          domainWhitelistEnabled: config.enableDomainWhitelist,
          allowedDomains: config.allowedDomains || [],
          checkedAt: new Date().toISOString(),
        };
      } catch (error) {
        console.error('‚ùå ÈÇÆÁÆ±ÂüüÂêçÈ™åËØÅÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('ÈÇÆÁÆ±ÂüüÂêçÈ™åËØÅÂ§±Ë¥•');
      }
    }),

  /**
   * Ëé∑ÂèñÁéØÂ¢ÉÂèòÈáèÁä∂ÊÄÅ
   */
  getEnvironmentStatus: adminProcedure
    .query(async () => {
      try {
        const requiredVars = [
          'COSEREEDEN_SMTP_HOST',
          'COSEREEDEN_SMTP_PORT',
          'COSEREEDEN_SMTP_USER',
          'COSEREEDEN_SMTP_PASS',
          'COSEREEDEN_SMTP_FROM',
          'NEXTAUTH_URL',
        ];

        const optionalVars = [
          'NEXT_PUBLIC_APP_URL',
          'EMAIL_FROM_NAME',
          'EMAIL_REPLY_TO',
          'SUPPORT_EMAIL',
          'BRAND_NAME',
          'BRAND_COLOR',
          'WEBSITE_URL',
          'EMAIL_TOKEN_EXPIRY_HOURS',
          'PASSWORD_RESET_EXPIRY_HOURS',
          'MAX_RESEND_ATTEMPTS',
          'RESEND_COOLDOWN_MINUTES',
        ];

        const envStatus = {
          required: {} as Record<string, boolean>,
          optional: {} as Record<string, boolean>,
          missing: [] as string[],
          present: [] as string[],
        };

        // Ê£ÄÊü•ÂøÖÈúÄÂèòÈáè
        for (const varName of requiredVars) {
          const isPresent = !!process.env[varName];
          envStatus.required[varName] = isPresent;

          if (isPresent) {
            envStatus.present.push(varName);
          } else {
            envStatus.missing.push(varName);
          }
        }

        // Ê£ÄÊü•ÂèØÈÄâÂèòÈáè
        for (const varName of optionalVars) {
          const isPresent = !!process.env[varName];
          envStatus.optional[varName] = isPresent;

          if (isPresent) {
            envStatus.present.push(varName);
          }
        }

        return {
          ...envStatus,
          totalRequired: requiredVars.length,
          totalOptional: optionalVars.length,
          requiredPresent: Object.values(envStatus.required).filter(Boolean).length,
          optionalPresent: Object.values(envStatus.optional).filter(Boolean).length,
          checkedAt: new Date().toISOString(),
        };
      } catch (error) {
        console.error('‚ùå Ëé∑ÂèñÁéØÂ¢ÉÂèòÈáèÁä∂ÊÄÅÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('Ëé∑ÂèñÁéØÂ¢ÉÂèòÈáèÁä∂ÊÄÅÂ§±Ë¥•');
      }
    }),

  /**
   * ÈáçÊñ∞Âä†ËΩΩÈÖçÁΩÆ
   */
  reloadConfig: adminProcedure
    .mutation(async () => {
      try {
        // ÈáçÊñ∞Âä†ËΩΩÈÖçÁΩÆ
        emailVerificationConfig.reload();
        await emailVerificationConfig.initialize();

        // È™åËØÅÊñ∞ÈÖçÁΩÆ
        const validationResult = await EmailConfigValidator.quickValidate();

        return {
          success: true,
          configValid: validationResult,
          message: validationResult ? 'ÈÖçÁΩÆÈáçÊñ∞Âä†ËΩΩÊàêÂäü' : 'ÈÖçÁΩÆÈáçÊñ∞Âä†ËΩΩÂÆåÊàêÔºå‰ΩÜÈ™åËØÅÂ§±Ë¥•',
          reloadedAt: new Date().toISOString(),
        };
      } catch (error) {
        console.error('‚ùå ÈáçÊñ∞Âä†ËΩΩÈÖçÁΩÆÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('ÈáçÊñ∞Âä†ËΩΩÈÖçÁΩÆÂ§±Ë¥•');
      }
    }),

  /**
   * Ëé∑ÂèñÈÖçÁΩÆÂª∫ËÆÆ
   */
  getConfigRecommendations: adminProcedure
    .query(async () => {
      try {
        const config = emailVerificationConfig.getConfig();
        const recommendations: any[] = [];

        // ÂÆâÂÖ®Âª∫ËÆÆ
        if (!config.requireHttps && process.env.NODE_ENV === 'production') {
          recommendations.push({
            type: 'security',
            priority: 'high',
            message: 'Áîü‰∫ßÁéØÂ¢ÉÂª∫ËÆÆÂêØÁî®HTTPSË¶ÅÊ±Ç',
            action: 'ËÆæÁΩÆ REQUIRE_HTTPS=true',
          });
        }

        // ‰ª§ÁâåËøáÊúüÊó∂Èó¥Âª∫ËÆÆ
        if (config.tokenExpiryHours > 48) {
          recommendations.push({
            type: 'security',
            priority: 'medium',
            message: 'ÈÇÆÁÆ±È™åËØÅ‰ª§ÁâåËøáÊúüÊó∂Èó¥ËæÉÈïøÔºåÂèØËÉΩÂ≠òÂú®ÂÆâÂÖ®È£éÈô©',
            action: 'ËÄÉËôëÂ∞Ü EMAIL_TOKEN_EXPIRY_HOURS ËÆæÁΩÆ‰∏∫24Â∞èÊó∂ÊàñÊõ¥Áü≠',
          });
        }

        // ÈáçÂèëÈôêÂà∂Âª∫ËÆÆ
        if (config.maxResendAttempts > 5) {
          recommendations.push({
            type: 'performance',
            priority: 'medium',
            message: 'ÊúÄÂ§ßÈáçÂèëÊ¨°Êï∞ËæÉÈ´òÔºåÂèØËÉΩË¢´Êª•Áî®',
            action: 'ËÄÉËôëÂ∞Ü MAX_RESEND_ATTEMPTS ËÆæÁΩÆ‰∏∫3-5Ê¨°',
          });
        }

        // ÂìÅÁâåÈÖçÁΩÆÂª∫ËÆÆ
        if (!process.env.COSEREEDEN_LOGO_URL) {
          recommendations.push({
            type: 'branding',
            priority: 'low',
            message: 'Êú™ËÆæÁΩÆÂìÅÁâåLogoÔºåÈÇÆ‰ª∂Ê®°ÊùøÂ∞Ü‰ΩøÁî®ÈªòËÆ§Ê†∑Âºè',
            action: 'ËÆæÁΩÆ LOGO_URL ‰ª•ÊèêÂçáÂìÅÁâåÂΩ¢Ë±°',
          });
        }

        // ÂüüÂêçÁôΩÂêçÂçïÂª∫ËÆÆ
        if (!config.enableDomainWhitelist && process.env.NODE_ENV === 'production') {
          recommendations.push({
            type: 'security',
            priority: 'low',
            message: 'Êú™ÂêØÁî®ÈÇÆÁÆ±ÂüüÂêçÁôΩÂêçÂçïÔºåÂèØËÉΩÊî∂Âà∞ÂûÉÂúæÊ≥®ÂÜå',
            action: 'ËÄÉËôëÂêØÁî® ENABLE_DOMAIN_WHITELIST Âπ∂ÈÖçÁΩÆ ALLOWED_EMAIL_DOMAINS',
          });
        }

        return {
          recommendations,
          totalCount: recommendations.length,
          highPriority: recommendations.filter(r => r.priority === 'high').length,
          mediumPriority: recommendations.filter(r => r.priority === 'medium').length,
          lowPriority: recommendations.filter(r => r.priority === 'low').length,
          generatedAt: new Date().toISOString(),
        };
      } catch (error) {
        console.error('‚ùå Ëé∑ÂèñÈÖçÁΩÆÂª∫ËÆÆÂ§±Ë¥•:', error);
        throw TRPCErrorHandler.internalError('Ëé∑ÂèñÈÖçÁΩÆÂª∫ËÆÆÂ§±Ë¥•');
      }
    }),
});

export default emailConfigValidationRouter;
