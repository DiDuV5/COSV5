/**
 * @fileoverview 高性能瀑布流媒体网格组件
 * @description 专为Tu Cosplay平台设计的稳定、高性能瀑布流组件，避免闪烁问题
 * @author Augment AI
 * @date 2024-01-XX
 * @version 1.0.0
 * @since 1.0.0
 *
 * @features
 * - 高性能瀑布流布局，支持500+媒体项目
 * - 防抖机制避免频繁resize
 * - 虚拟滚动优化
 * - 懒加载和Intersection Observer
 * - 响应式设计（移动端2列，平板3列，桌面4-5列）
 * - 权限控制系统集成
 * - 与StableMediaLightbox完美兼容
 *
 * @dependencies
 * - React 18+
 * - Next.js 14+
 * - Intersection Observer API
 *
 * @changelog
 * - 2024-01-XX: 初始版本创建，专注性能和稳定性
 */

'use client';

import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import Image from 'next/image';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import {
  Play,
  Lock,
  Eye,
  EyeOff,
  FileImage,
  Video as VideoIcon,
  Crown,
  Star,
  Shield,
  Unlock,
  Filter // 使用 Filter 图标替代不存在的 Blur 图标
} from 'lucide-react';
import { api } from '@/trpc/react';

interface MediaItem {
  id: string;
  url: string;
  thumbnailUrl?: string | null;
  filename?: string | null;
  originalName: string;
  mediaType: string; // 改为 string 类型以兼容数据库返回的值
  width?: number | null;
  height?: number | null;
  duration?: number | null;
  fileSize?: number | null;
}

interface HighPerformanceMasonryGridProps {
  media: MediaItem[];
  userLevel: string;
  onMediaClick: (media: MediaItem, index: number) => void;
  className?: string;
  showPermissionInfo?: boolean;
  enablePermissionUpgrade?: boolean;
  onPermissionUpgrade?: () => void;
}

// 用户组媒体访问权限配置
const MEDIA_ACCESS_LIMITS = {
  GUEST: {
    percentage: 20,
    label: '访客',
    color: '#6b7280',
    icon: Eye,
    description: '仅可查看20%的媒体内容'
  },
  USER: {
    percentage: 60,
    label: '入馆',
    color: '#3b82f6',
    icon: Star,
    description: '可查看60%的媒体内容'
  },
  MEMBER: {
    percentage: 100,
    label: '赞助',
    color: '#10b981',
    icon: Crown,
    description: '可查看所有媒体内容'
  },
  CREATOR: {
    percentage: 100,
    label: '荣誉',
    color: '#8b5cf6',
    icon: Crown,
    description: '可查看所有媒体内容'
  },
  ADMIN: {
    percentage: 100,
    label: '守馆',
    color: '#ef4444',
    icon: Shield,
    description: '可查看所有媒体内容'
  }
} as const;

// 类型守卫函数：验证媒体类型
const isValidMediaType = (mediaType: string): mediaType is 'IMAGE' | 'VIDEO' => {
  return mediaType === 'IMAGE' || mediaType === 'VIDEO';
};

export const HighPerformanceMasonryGrid = React.memo<HighPerformanceMasonryGridProps>(({
  media,
  userLevel,
  onMediaClick,
  className = '',
  showPermissionInfo = true,
  enablePermissionUpgrade = true,
  onPermissionUpgrade
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [containerWidth, setContainerWidth] = useState(0);
  // 移除全局loadedImages状态，避免不必要的重渲染
  const [showRestrictedContent, setShowRestrictedContent] = useState(false);
  const [showPermissionDetails, setShowPermissionDetails] = useState(false);
  const resizeTimeoutRef = useRef<NodeJS.Timeout>();
  const observerRef = useRef<IntersectionObserver>();

  // 获取用户权限配置 - 添加缓存
  const { data: userPermissions, isPending: permissionsLoading } = api.permission.getConfigByLevel.useQuery(
    { userLevel },
    {
      enabled: !!userLevel,
      staleTime: 5 * 60 * 1000, // 5分钟缓存
      gcTime: 10 * 60 * 1000 // 10分钟缓存
    }
  );

  // 计算列数和列宽 - 使用useMemo稳定化
  const { columnCount, columnWidth, gap } = useMemo(() => {
    if (containerWidth === 0) return { columnCount: 2, columnWidth: 150, gap: 16 };

    const gap = 16;
    let columns: number;

    // 响应式列数计算
    if (containerWidth < 640) {
      columns = 2; // 移动端
    } else if (containerWidth < 1024) {
      columns = 3; // 平板
    } else if (containerWidth < 1280) {
      columns = 4; // 小桌面
    } else {
      columns = 5; // 大桌面
    }

    const totalGap = gap * (columns - 1);
    const availableWidth = containerWidth - totalGap;
    const width = Math.floor(availableWidth / columns);

    return { columnCount: columns, columnWidth: width, gap };
  }, [containerWidth]);

  // 权限控制 - 使用useMemo稳定化，集成API数据
  const accessLimit = useMemo(() => {
    const defaultLimit = MEDIA_ACCESS_LIMITS[userLevel as keyof typeof MEDIA_ACCESS_LIMITS] || MEDIA_ACCESS_LIMITS.GUEST;

    // 如果有API数据，使用API中的权限配置
    if (userPermissions?.mediaAccessPercentage !== undefined) {
      return {
        ...defaultLimit,
        percentage: userPermissions.mediaAccessPercentage,
        canViewRestrictedPreview: userPermissions.canViewRestrictedPreview || false
      };
    }

    return defaultLimit;
  }, [userLevel, userPermissions]);

  const maxAccessibleCount = useMemo(() => {
    return Math.ceil(media.length * (accessLimit.percentage / 100));
  }, [media.length, accessLimit.percentage]);

  // 权限统计信息
  const permissionStats = useMemo(() => {
    const accessible = maxAccessibleCount;
    const restricted = media.length - accessible;
    const accessPercentage = media.length > 0 ? Math.round((accessible / media.length) * 100) : 0;

    return {
      accessible,
      restricted,
      total: media.length,
      accessPercentage,
      isFullAccess: accessPercentage >= 100,
      hasRestrictions: restricted > 0
    };
  }, [maxAccessibleCount, media.length]);

  // 分离可访问和受限制的媒体
  const { accessibleMedia, restrictedMedia } = useMemo(() => {
    const accessible = media.slice(0, maxAccessibleCount);
    const restricted = media.slice(maxAccessibleCount);
    return { accessibleMedia: accessible, restrictedMedia: restricted };
  }, [media, maxAccessibleCount]);

  // 当前显示的媒体列表
  const displayMedia = useMemo(() => {
    return showRestrictedContent ? media : accessibleMedia;
  }, [showRestrictedContent, media, accessibleMedia]);

  // 容器宽度监听 - 添加防抖
  const updateContainerWidth = useCallback(() => {
    if (containerRef.current) {
      const newWidth = containerRef.current.offsetWidth;
      // 只有宽度变化超过10px才更新，避免频繁重渲染
      if (Math.abs(newWidth - containerWidth) > 10) {
        setContainerWidth(newWidth);
      }
    }
  }, [containerWidth]);

  const debouncedUpdateWidth = useCallback(() => {
    if (resizeTimeoutRef.current) {
      clearTimeout(resizeTimeoutRef.current);
    }
    resizeTimeoutRef.current = setTimeout(updateContainerWidth, 150);
  }, [updateContainerWidth]);

  // 初始化和resize监听
  useEffect(() => {
    updateContainerWidth();
    window.addEventListener('resize', debouncedUpdateWidth);
    
    return () => {
      window.removeEventListener('resize', debouncedUpdateWidth);
      if (resizeTimeoutRef.current) {
        clearTimeout(resizeTimeoutRef.current);
      }
    };
  }, [debouncedUpdateWidth, updateContainerWidth]);

  // 计算媒体项高度
  const calculateItemHeight = useCallback((item: MediaItem): number => {
    // 保持原始宽高比
    if (item.width && item.height && item.width > 0) {
      return Math.floor((columnWidth * item.height) / item.width);
    }
    
    // 默认高度
    return isValidMediaType(item.mediaType) && item.mediaType === 'VIDEO'
      ? Math.floor(columnWidth * 0.75) // 视频 4:3 比例
      : Math.floor(columnWidth * 1.2); // 图片稍高
  }, [columnWidth]);

  // 瀑布流布局计算
  const layoutItems = useMemo(() => {
    if (columnCount === 0 || columnWidth === 0 || !displayMedia.length) {
      return { positions: [], totalHeight: 200 };
    }

    const columnHeights = new Array(columnCount).fill(0);
    const positions: Array<{
      item: MediaItem;
      index: number;
      x: number;
      y: number;
      width: number;
      height: number;
    }> = [];

    displayMedia.forEach((item, index) => {
      // 找到最短的列
      const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
      const height = calculateItemHeight(item);
      
      const x = shortestColumnIndex * (columnWidth + gap);
      const y = columnHeights[shortestColumnIndex];

      positions.push({
        item,
        index,
        x,
        y,
        width: columnWidth,
        height
      });

      // 更新列高度
      columnHeights[shortestColumnIndex] += height + gap;
    });

    const totalHeight = Math.max(...columnHeights);
    return { positions, totalHeight };
  }, [displayMedia, columnCount, columnWidth, gap, calculateItemHeight]);

  // 媒体项组件
  const MediaItem = React.memo<{
    position: typeof layoutItems.positions[0];
    isRestricted?: boolean;
    showPreview?: boolean;
  }>(({ position, isRestricted = false, showPreview = false }) => {
    const [isVisible, setIsVisible] = useState(false);
    const [isPending, setIsLoading] = useState(true);
    const [hasError, setHasError] = useState(false);
    const itemRef = useRef<HTMLDivElement>(null);

    // Intersection Observer for lazy loading
    useEffect(() => {
      const observer = new IntersectionObserver(
        ([entry]) => {
          if (entry.isIntersecting) {
            setIsVisible(true);
            observer.disconnect();
          }
        },
        { 
          rootMargin: '50px',
          threshold: 0.1
        }
      );

      if (itemRef.current) {
        observer.observe(itemRef.current);
      }

      return () => observer.disconnect();
    }, []);

    const handleImageLoad = useCallback(() => {
      setIsLoading(false);
      // 移除全局状态更新，避免重渲染循环
    }, []);

    const handleImageError = useCallback(() => {
      setIsLoading(false);
      setHasError(true);
    }, []);

    const handleClick = useCallback(() => {
      // 如果是受限内容且不允许预览，显示权限升级提示
      if (isRestricted && !showPreview) {
        if (enablePermissionUpgrade && onPermissionUpgrade) {
          onPermissionUpgrade();
        }
        return;
      }

      onMediaClick(position.item, position.index);
    }, [position.item, position.index, isRestricted, showPreview, enablePermissionUpgrade, onPermissionUpgrade]);

    return (
      <div
        ref={itemRef}
        className="absolute cursor-pointer"
        style={{
          left: position.x,
          top: position.y,
          width: position.width,
          height: position.height
        }}
        onClick={handleClick}
      >
        <div className={`relative w-full h-full bg-gray-100 rounded-lg overflow-hidden transition-all duration-200 ${
          isRestricted && !showPreview
            ? 'hover:shadow-md'
            : 'hover:shadow-lg'
        }`}>
          {/* 加载状态 */}
          {isPending && (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-100">
              <div className="w-6 h-6 border-2 border-gray-300 border-t-blue-500 rounded-full animate-spin" />
            </div>
          )}

          {/* 错误状态 */}
          {hasError && (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-100 text-gray-400">
              <FileImage className="w-8 h-8" />
            </div>
          )}

          {/* 媒体内容 */}
          {isVisible && !hasError && (
            <>
              <Image
                src={position.item.thumbnailUrl || (position.item as any).cdnUrl || position.item.url}
                alt={position.item.originalName}
                fill
                className={`object-cover transition-opacity duration-200 ${
                  isPending ? 'opacity-0' : 'opacity-100'
                } ${
                  isRestricted && !showPreview ? 'blur-sm' : ''
                }`}
                sizes={`${position.width}px`}
                onLoad={handleImageLoad}
                onError={handleImageError}
                loading="lazy"
                quality={75}
              />

              {/* 受限内容遮罩 */}
              {isRestricted && !showPreview && (
                <div className="absolute inset-0 bg-black/60 flex flex-col items-center justify-center text-white">
                  <Lock className="w-8 h-8 mb-2" />
                  <div className="text-xs text-center px-2">
                    <div className="font-medium">内容受限</div>
                    <div className="text-gray-300 mt-1">升级权限解锁</div>
                  </div>
                </div>
              )}

              {/* 视频标识 */}
              {isValidMediaType(position.item.mediaType) && position.item.mediaType === 'VIDEO' && (
                <div className="absolute inset-0 bg-black/30 flex items-center justify-center">
                  <div className="w-12 h-12 bg-white/90 rounded-full flex items-center justify-center">
                    <Play className="w-6 h-6 text-gray-800 ml-1" />
                  </div>
                </div>
              )}

              {/* 媒体类型标识 */}
              <Badge
                variant={isValidMediaType(position.item.mediaType) && position.item.mediaType === 'VIDEO' ? 'destructive' : 'secondary'}
                className="absolute top-2 left-2 text-xs"
              >
                {isValidMediaType(position.item.mediaType) && position.item.mediaType === 'VIDEO' ? (
                  <><VideoIcon className="w-3 h-3 mr-1" />视频</>
                ) : (
                  '图片'
                )}
              </Badge>
            </>
          )}
        </div>
      </div>
    );
  });

  MediaItem.displayName = 'MediaItem';

  // 检查是否有权限查看所有内容
  const canViewAllContent = accessLimit.percentage >= 100;

  return (
    <div className={`w-full ${className}`}>
      {/* 增强的权限信息面板 */}
      {showPermissionInfo && (
        <div className="mb-4 space-y-3">
          {/* 主要权限信息 */}
          <div className="flex items-center justify-between p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg border">
            <div className="flex items-center gap-4">
              {/* 用户等级图标和信息 */}
              <div className="flex items-center gap-2">
                <div
                  className="w-8 h-8 rounded-full flex items-center justify-center text-white"
                  style={{ backgroundColor: accessLimit.color }}
                >
                  <accessLimit.icon className="w-4 h-4" />
                </div>
                <div>
                  <div className="font-medium text-sm">{accessLimit.label}</div>
                  <div className="text-xs text-gray-500">{accessLimit.description}</div>
                </div>
              </div>

              {/* 访问进度 */}
              <div className="flex items-center gap-3">
                <div className="text-sm text-gray-600">
                  {permissionStats.accessible} / {permissionStats.total} 项媒体
                </div>
                <div className="w-24">
                  <Progress
                    value={permissionStats.accessPercentage}
                    className="h-2"
                  />
                </div>
                <Badge
                  variant={permissionStats.isFullAccess ? "default" : "secondary"}
                  className="text-xs"
                >
                  {permissionStats.accessPercentage}%
                </Badge>
              </div>
            </div>

            {/* 控制按钮 */}
            <div className="flex items-center gap-2">
              {/* 权限详情按钮 */}
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowPermissionDetails(!showPermissionDetails)}
                className="text-xs"
              >
                <Eye className="w-3 h-3 mr-1" />
                详情
              </Button>

              {/* 受限内容控制 */}
              {permissionStats.hasRestrictions && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowRestrictedContent(!showRestrictedContent)}
                  className="text-xs"
                >
                  {showRestrictedContent ? (
                    <><EyeOff className="w-3 h-3 mr-1" />隐藏受限</>
                  ) : (
                    <><Eye className="w-3 h-3 mr-1" />显示受限</>
                  )}
                </Button>
              )}

              {/* 权限升级按钮 */}
              {!permissionStats.isFullAccess && enablePermissionUpgrade && (
                <Button
                  variant="default"
                  size="sm"
                  onClick={onPermissionUpgrade}
                  className="text-xs bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
                >
                  <Unlock className="w-3 h-3 mr-1" />
                  升级权限
                </Button>
              )}
            </div>
          </div>

          {/* 权限详情面板 */}
          {showPermissionDetails && (
            <div className="p-4 bg-white border rounded-lg shadow-sm">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium text-sm mb-2 flex items-center gap-2">
                    <Shield className="w-4 h-4" />
                    当前权限
                  </h4>
                  <div className="space-y-1 text-xs text-gray-600">
                    <div>• 媒体访问: {accessLimit.percentage}%</div>
                    <div>• 受限预览: {(accessLimit as any).canViewRestrictedPreview ? '允许' : '禁止'}</div>
                    {userPermissions && (
                      <>
                        <div>• 视频播放: {userPermissions.canPlayVideos ? '允许' : '禁止'}</div>
                        <div>• 图片下载: {userPermissions.canDownloadImages ? '允许' : '禁止'}</div>
                      </>
                    )}
                  </div>
                </div>
                <div>
                  <h4 className="font-medium text-sm mb-2 flex items-center gap-2">
                    <Crown className="w-4 h-4" />
                    升级权益
                  </h4>
                  <div className="space-y-1 text-xs text-gray-600">
                    {!permissionStats.isFullAccess && (
                      <>
                        <div>• 解锁所有媒体内容</div>
                        <div>• 高清图片下载</div>
                        <div>• 视频无限播放</div>
                        <div>• 专属会员标识</div>
                      </>
                    )}
                    {permissionStats.isFullAccess && (
                      <div className="text-green-600">✓ 已享有全部权益</div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* 权限提示 */}
          {permissionStats.hasRestrictions && !showRestrictedContent && (
            <div className="flex items-center gap-2 p-3 bg-amber-50 border border-amber-200 rounded-lg">
              <Lock className="w-4 h-4 text-amber-600" />
              <div className="text-sm text-amber-700">
                有 {permissionStats.restricted} 项内容因权限限制而隐藏
                {enablePermissionUpgrade && (
                  <button
                    type="button"
                    onClick={onPermissionUpgrade}
                    className="ml-2 text-amber-800 underline hover:no-underline"
                  >
                    立即升级
                  </button>
                )}
              </div>
            </div>
          )}
        </div>
      )}

      {/* 瀑布流容器 */}
      <div 
        ref={containerRef}
        className="relative w-full"
        style={{ height: layoutItems.totalHeight || 200 }}
      >
        {layoutItems.positions.map((position) => {
          const isRestricted = position.index >= maxAccessibleCount;
          const showPreview = isRestricted && ((accessLimit as any).canViewRestrictedPreview || false);

          return (
            <MediaItem
              key={position.item.id}
              position={position}
              isRestricted={isRestricted}
              showPreview={showPreview}
            />
          );
        })}

        {/* 空状态 */}
        {displayMedia.length === 0 && (
          <div className="flex items-center justify-center h-64 text-gray-400">
            <div className="text-center">
              <FileImage className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p>暂无媒体内容</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
});

HighPerformanceMasonryGrid.displayName = 'HighPerformanceMasonryGrid';
